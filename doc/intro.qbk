[section Introduction]

The class template, `polymorphic_value`, confers value-like semantics on a
free-store allocated object.  A `polymorphic_value<T>` may hold an object of a
class publicly derived from T, and copying the polymorphic_value<T> will copy
the object of the derived type.

All of the contents of `<boost/polymorphic_value.hpp>` are defined inside
`namespace boost`.

`polymorphic_value` is proposed for addition to Boost and to the C++ Standard
Library.

[heading Problem]

Suppose we want to design a class in terms of polymorphic components and have
the compiler correctly generate the special member functions: destructor, copy
constructor, copy assignment operator, move constructor and move assignment
operator.

[heading Solution]

This is how one would write a class made of polymorphic components using
`polymorphic_value`:

    #include <boost/polymorphic_value.hpp>
    #include <vector>

    class Zoo {
      std::vector<boost::polymorphic_value<Animal>> animals_;
     public:
      Zoo() = default;
      Zoo(std::vector<boost::polymorphic_value<Animal>> animals) :
          animals_(std::move(animals)) {}

      std::size_t size() const {
        return animals_.size();
      }

      const Animal& operator[](std::size_t i) const {
        return *animals_[i];
      }

      Animal& operator[](std::size_t i) {
        return *animals_[i];
      }

      void AddAnimal(boost::polymorphic_value<Animal> animal) {
        animals_.push_back(std::move(animal));
      }
    }

[endsect]

